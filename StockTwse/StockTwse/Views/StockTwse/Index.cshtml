@{
	ViewData["Title"] = "StockTwse";
}

@section Styles {
	<style>
		/* []表示属性 */
		/* 带有v-cloak属性的元素先隐藏, 等資料下載完成才顯示, 不然載入頁面會看到一堆{{xxx}} */
		[v-cloak] {
			display: none;
		}
	</style>
}

<div class="container" id="app">
	<div class="row">
		<div class="col-md-12 pt-5">
			<div class="input-group">
				@* <span class="input-group-text" id="basic-addon1">請輸入股票代號(每5分鐘自動刷新一次)</span> *@
				<input type="number" class="form-control" placeholder="2330 or 6547 or 3231" aria-label="Username" aria-describedby="basic-addon1" v-model="userInput">
			</div>
			<span class="input-group-text text-danger" id="basic-addon1">請輸入股票代號(每5分鐘自動刷新一次)，刷新數量和次數不要太頻繁，不然會被BAN!</span>
		</div>
	</div>
	<div class="row">
		<div class="col-md-12 pt-3">
			<button type="button" class="btn btn-primary" v-on:click="getStockApi">確定資料</button>
			<button type="button" class="btn btn-danger" v-on:click="cleanStockInfo">清除資料</button>
			<button type="button" class="btn btn-success" v-on:click="updateStockInfo">手動刷新</button>
		</div>
	</div>
	<div class="row pt-3">
		<table class="table table-striped table-bordered" v-if="spinner">
			<thead class="table-light">
				<tr>
					<th scope="col">股票代號</th>
					@* <th scope="col">上市或上櫃公司</th> *@
					<th scope="col">公司簡稱</th>
					@* <th scope="col">nf	公司全名</th> *@
					<th scope="col">最近交易日期</th>
					@* <th scope="col">t	最近成交時刻（HH:MI:SS）</th> *@
					@* <th scope="col">tlong	資料更新時間（單位：毫秒）</th> *@
					<th scope="col">當前盤中成交價</th>
					<th scope="col">當前盤中盤成交量</th>
					<th scope="col">累積成交量</th>
					<th scope="col">開盤價格</th>
					<th scope="col">最高價格</th>
					<th scope="col">最低價格</th>
					<th scope="col">昨日收盤價格</th>
					@* <th scope="col">b	揭示買價(從高到低，以_分隔資料)</th> *@
					@* <th scope="col">g	揭示買量(配合b，以_分隔資料</th> *@
					@* <th scope="col">a	揭示賣價(從低到高，以_分隔資料)</th> *@
					@* <th scope="col">f	揭示賣量(配合a，以_分隔資料)</th> *@
					@* <th scope="col">u	漲停價</th> *@
					@* <th scope="col">w	跌停價</th> *@
					<th scope="col" class="green">漲跌</th>
					<th scope="col">漲跌幅</th>
				</tr>
			</thead>
			<tbody class="table-group-divider" v-cloak>
				@* 因為有給一筆初始值，這邊檢查 array 長度大於1才渲染 index > 0 *@
				<tr v-for="(item, index) in stockInfo" v-bind:key="index" v-if="index > 0">
					<td>{{ item.msgArray[0].c }}</td>
					@* <td>{{ item.msgArray[0].c }}</td> *@
					<td>{{ item.msgArray[0].n }}</td>
					@* <td>{{ item.msgArray[0].nf }}</td> *@
					<td>{{ item.msgArray[0].d + " " + item.msgArray[0].t }}</td>
					@* <td>{{ item.msgArray[0].t }}</td> *@
					@* <td>{{ item.msgArray[0].tlong }}</td> *@
					<td>{{ item.msgArray[0].z }}</td>
					<td>{{ item.msgArray[0].tv }}</td>
					<td>{{ item.msgArray[0].v }}</td>
					<td>{{ item.msgArray[0].o }}</td>
					<td>{{ item.msgArray[0].h }}</td>
					<td>{{ item.msgArray[0].l }}</td>
					<td>{{ item.msgArray[0].y }}</td>
					@* <td>{{ item.msgArray[0].b }}</td> *@
					@* <td>{{ item.msgArray[0].g }}</td> *@
					@* <td>{{ item.msgArray[0].a }}</td> *@
					@* <td>{{ item.msgArray[0].f }}</td> *@
					@* <td>{{ item.msgArray[0].u }}</td> *@
					@* <td>{{ item.msgArray[0].w }}</td> *@
					<td v-bind:class="{'text-danger': item.msgArray[0].z - item.msgArray[0].y > 0, 'text-success': item.msgArray[0].z - item.msgArray[0].y < 0}">
						{{ (item.msgArray[0].z - item.msgArray[0].y).toFixed(2) }}
					</td>
					<td v-bind:class="{'text-danger': item.msgArray[0].z - item.msgArray[0].y > 0, 'text-success': item.msgArray[0].z - item.msgArray[0].y < 0}">
						{{ ((item.msgArray[0].z - item.msgArray[0].y) / item.msgArray[0].y * 100).toFixed(2) }}%
					</td>
				</tr>
			</tbody>
		</table>

		@*bs spinner 動畫*@
		<partial name="_Spinner"></partial>
	</div>
</div>

@section Scripts {
	<script>
		let app = new Vue({
			el: "#app",
			data: {
				spinner: true,
				userInput: "",
				// 給一個初始值，不然 v-for 會錯誤 test
				stockInfo: [{ "msgArray": [{}] }],
			},
			mounted: function () {
				let _this = this;
				// 每5分鐘刷新一次股票資訊
				setInterval(function () {
					_this.updateStockInfo();
				}, 300000);
			},
			computed: {

			},
			methods: {
				// 取得股票資訊
				getStockApi: async function () {
					let _this = this;

					// 檢查是否有輸入股票代號
					if (_this.userInput === "") {
						alert("請輸入股票代號!");
						return;
					};

					// 檢查股票代號是否已經存在於 stockInfo 中
					if (_this.stockInfo.some(item => item.msgArray[0].c === _this.userInput)) {
						alert("股票代號已存在!");
						return;
					}

					_this.spinner = false;

					// 打 api, 並且 push 到 array
					await axios.get(`api/StockTwseApi/GetStockInfo/${this.userInput}`).then(response => {
						_this.stockInfo.push(response.data);
						_this.spinner = true;

						// 檢查輸入的股票代號如果不正確就 alert 並且刪除最後一筆資料
						if (_this.stockInfo[_this.stockInfo.length - 1].msgArray.length === 0) {
							_this.stockInfo.pop();
							alert("查無此股票代號!");
						};
					});
				},
				// 清除資料
				cleanStockInfo: function () {
					let _this = this;
					_this.stockInfo = [{ "msgArray": [{}] }];
					_this.userInput = "";
					_this.spinner = true;
				},

				// 刷新股票資訊
				updateStockInfo: async function () {
					let _this = this;

					console.log("更新中");

					// 遍歷 stockInfo 中的每一筆股票代號，發送 API 請求並更新資訊
					for (let i = 1; i < _this.stockInfo.length; i++) {
						let stockCode = _this.stockInfo[i].msgArray[0].c;
						let stockName = _this.stockInfo[i].msgArray[0].n;
						let updateTime = moment().format('HH:mm:ss');

						await axios.get(`api/StockTwseApi/GetStockInfo/${stockCode}`).then(response => {
							// 更新 stockInfo 中的資訊
							_this.$set(_this.stockInfo, i, response.data);
							_this.updateCount++;

							// 使用 Toastify 顯示更新提示
							Toastify({
								text: `${updateTime} ${stockName} 資料已更新！`,
								duration: -1, // 顯示時間，單位是毫秒，-1 = 永久不消失
								gravity: "bottom", // 提示框位置
								position: "right",
								backgroundColor: "green", // 提示框背景色
								close: true, // 關閉的X
								stopOnFocus: false, // 不在焦點時是否停止計時
							}).showToast();
						});
					}
				},
				// 計算漲跌幅
				calculatePriceChangePercentage: function () {

				},
			},
		});
	</script>
}